I've opted to go with the read from file approach for input so to run this file please run:

    ruby root_sample.rb "<name of input file>"

Included in the project directory is the sample file given in the problem statement.  To run that use: 

    ruby root_sample.rb "input.txt"

I decided that I only needed two classes here Driver and Trip.  Each driver can 'have_many' trips and I store the trips in an array on each driver class.  This makes it easier to sum information about each driver and how long/fast each of their trips were.  I elected to store the drivers I imported with a global variable on the driver class.  As I said in the comments, I wouldn't normally do this but it was the correct way to store the imported drivers.

The import method on the driver class populates the driver list which i elected to store in a hash so I could update the correct record easily.  The data given trips are sorted by the drivers name but the hash would allow for the order to not matter, plus its faster searching for the correct driver name than an array.  Though with only 3 records it doesn't matter which we choose really.

The helper methods on Driver class are pretty self explanatory, two summation methods and a sorting method to output them final list in the correct order (by distance).  The helper methods on trip are a little bit more complex including the math needed to calculate total duration by hours/minutes.

Realistically I would just use a datetime class to calculate the difference in time for me (especially since this information would likely be stored as dates in the DB), but since the requirement was added it cant go past 24 this seemed like a more simple approach.  MPH helper method converts the miles/minutes into miles/hour and returns zero if either parameter is missing.
